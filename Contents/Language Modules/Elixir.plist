<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BBEditDocumentType</key>
	<string>CodelessLanguageModule</string>

	<key>BBLMLanguageDisplayName</key>
	<string>Elixir</string>

	<key>BBLMLanguageCode</key>
	<string>elxr</string>
	
	<key>BBLMFilenameExtensions</key>
	<array>
		<string>ex</string>
		<string>exs</string>
	</array>

	<key>BBLMPreferredFilenameExtension</key>
	<string>ex</string>
	
	<key>BBLMSupportsTextCompletion</key>
	<true/>
	
	<key>BBLMReferenceSearchURLTemplate</key>
	<string>https://hexdocs.pm/elixir/search.html?q=__SYMBOLNAME__</string>

	<key>BBLMDashDocsets</key>
	<array>
		<string>elixir</string>
		<string>erl</string>
	</array>

	<key>BBLMIsCaseSensitive</key>
	<true/>

	<key>BBLMScansFunctions</key>
	<true/>

	<key>BBLMColorsSyntax</key>
	<true/>

	<key>BBLMLanguageServerInfo</key>
	<dict>
		<key>ServerCommand</key>
		<string>language_server.sh</string>
	</dict>

	<key>BBLMSpellableRunKinds</key>
	<array>
		<string>com.barebones.bblm.line-comment</string>
		<string>com.barebones.bblm.block-comment</string>
	</array>

	<key>BBLMKeywords</key>
	<array>
		<dict>
			<key>RunKind</key> <string>com.barebones.bblm.keyword</string>
			<key>Keywords</key>
			<array>
				<string>@</string>
				<string>@behaviour</string>
				<string>@doc</string>
				<string>@impl</string>
				<string>@moduledoc</string>
				<string>@name</string>
				<string>~c</string>
				<string>~C</string>
				<string>~D</string>
				<string>~N</string>
				<string>~r</string>
				<string>~R</string>
				<string>~s</string>
				<string>~S</string>
				<string>~T</string>
				<string>~w</string>
				<string>~W</string>
				<string>abs</string>
				<string>after</string>
				<string>alias!</string>
				<string>alias</string>
				<string>and</string>
				<string>apply</string>
				<string>binary_part</string>
				<string>binding</string>
				<string>bit_size</string>
				<string>byte_size</string>
				<string>case</string>
				<string>catch</string>
				<string>cond</string>
				<string>dbg</string>
				<string>def</string>
				<string>defdelegate</string>
				<string>defexception</string>
				<string>defguard</string>
				<string>defguardp</string>
				<string>defimpl</string>
				<string>defmacro</string>
				<string>defmacrop</string>
				<string>defmodule</string>
				<string>defoverridable</string>
				<string>defp</string>
				<string>defprotocol</string>
				<string>defrecord</string>
				<string>defrecordp</string>
				<string>defstruct</string>
				<string>destructure</string>
				<string>div</string>
				<string>do:</string>
				<string>do</string>
				<string>elem</string>
				<string>else</string>
				<string>end</string>
				<string>exit</string>
				<string>fn</string>
				<string>for:</string>
				<string>for</string>
				<string>function_exported?</string>
				<string>function</string>
				<string>get_and_update_in</string>
				<string>get_in</string>
				<string>hd</string>
				<string>if</string>
				<string>import</string>
				<string>in</string>
				<string>inlist</string>
				<string>inspect</string>
				<string>is_atom</string>
				<string>is_binary</string>
				<string>is_bitstring</string>
				<string>is_boolean</string>
				<string>is_float</string>
				<string>is_function</string>
				<string>is_integer</string>
				<string>is_list</string>
				<string>is_map</string>
				<string>is_nil</string>
				<string>is_number</string>
				<string>is_pid</string>
				<string>is_port</string>
				<string>is_reference</string>
				<string>is_tuple</string>
				<string>lc</string>
				<string>length</string>
				<string>macro_exported?</string>
				<string>make_ref</string>
				<string>map_size</string>
				<string>match?</string>
				<string>max</string>
				<string>min</string>
				<string>node</string>
				<string>not</string>
				<string>or</string>
				<string>pop_in</string>
				<string>put_elem</string>
				<string>put_in</string>
				<string>quote</string>
				<string>raise</string>
				<string>receive</string>
				<string>rem</string>
				<string>require</string>
				<string>reraise</string>
				<string>round</string>
				<string>self</string>
				<string>send</string>
				<string>setup</string>
				<string>spawn_link</string>
				<string>spawn_monitor</string>
				<string>spawn</string>
				<string>struct</string>
				<string>super</string>
				<string>teardown</string>
				<string>test</string>
				<string>throw</string>
				<string>tl</string>
				<string>to_charlist</string>
				<string>to_string</string>
				<string>trunc</string>
				<string>try</string>
				<string>tuple_size</string>
				<string>unless</string>
				<string>unquote_splicing</string>
				<string>unquote</string>
				<string>update_in</string>
				<string>use</string>
				<string>var!</string>
				<string>when</string>
				<string>with</string>
				<string>xor</string>
			</array>
		</dict>

		<dict>
			<key>RunKind</key> <string>com.barebones.bblm.predefined-symbol</string>
			<key>Keywords</key>
			<array>
				<string>__CALLER__</string>
				<string>__DIR__</string>
				<string>__ENV__</string>
				<string>__MODULE__</string>
				<string>__aliases__</string>
				<string>__block__</string>
				<string>Access</string>
				<string>Agent</string>
				<string>Application</string>
				<string>Atom</string>
				<string>Base</string>
				<string>Bitwise</string>
				<string>Calendar</string>
				<string>ISO</string>
				<string>TimeZoneDatabase</string>
				<string>UTCOnlyTimeZoneDatabase</string>
				<string>Code</string>
				<string>Config</string>
				<string>Provider</string>
				<string>Reader</string>
				<string>Date</string>
				<string>Range</string>
				<string>DateTime</string>
				<string>DynamicSupervisor</string>
				<string>Enum</string>
				<string>Enumerable</string>
				<string>Exception</string>
				<string>File</string>
				<string>Stat</string>
				<string>Stream</string>
				<string>Error</string>
				<string>Float</string>
				<string>Fragment</string>
				<string>Function</string>
				<string>GenServer</string>
				<string>IO</string>
				<string>Inspect</string>
				<string>Algebra</string>
				<string>Opts</string>
				<string>Integer</string>
				<string>Kernel</string>
				<string>ParallelCompiler</string>
				<string>SpecialForms</string>
				<string>Keyword</string>
				<string>List</string>
				<string>Chars</string>
				<string>Macro</string>
				<string>Env</string>
				<string>Map</string>
				<string>MapSet</string>
				<string>Module</string>
				<string>NaiveDateTime</string>
				<string>Node</string>
				<string>OptionParser</string>
				<string>PartitionSupervisor</string>
				<string>Path</string>
				<string>Port</string>
				<string>Process</string>
				<string>Protocol</string>
				<string>Range</string>
				<string>Record</string>
				<string>Regex</string>
				<string>Registry</string>
				<string>Stream</string>
				<string>String</string>
				<string>StringIO</string>
				<string>Supervisor</string>
				<string>System</string>
				<string>Task</string>
				<string>Time</string>
				<string>Tuple</string>
				<string>URI</string>
				<string>Version</string>
			</array>
		</dict>
	</array>

	<key>BBLMCommentLineDefault</key>
	<string>#</string>

	<key>Language Features</key>
	<dict>
		<key>Identifier and Keyword Character Class</key>
		<string>A-Za-z0-9_:?@!%~</string>

		<key>Comment Pattern</key>
		<string><![CDATA[
		(\#.*$)|(\b_[a-z]*)
		]]></string>

		<key>String Pattern</key>
		<string><![CDATA[
		(?x:
			(?s: (""".*?""")) | (?# double-quote heredoc)
			(?s: ('''.*?''')) | (?# single-quote heredoc)
			("(\\"|[^"])*") | (?# double-quoted string)
			('(\\'|[^'])*') (?# single-quoted char list)
		)
		]]>
		</string>

		<key>Function Pattern</key>
		<string><![CDATA[
		(?x:
			(?P<indent>^[ \t]*)
			(?P<function>
				def(macro)?p?\s+
				(?P<function_name>[a-zA-Z0-9_:?@!%]+)
				(
				    (.*\n)(^(?!(?P=indent)end\b).*$\n?)*(?P=indent)end\b | (?# First consume the remainder of the first line--that contains the function name--if there is any remainder. Then consume all lines that don't begin with the indented "end" we're looking for. Finally, consume the "end" token.)
					(.+\sdo:.+)
				)
			)
		)
		]]>
		</string>

		<key>Skip Pattern</key>
		<string><![CDATA[
		(?x: (?P>comment) | (?P>string) )
		]]>
		</string>
	</dict>
</dict>
</plist>
